Id,Rule Name,Product,Severity,Status,Confidence,Category,Is Pro Rule,Repository Name,Repository Url,Line Of Code Url,Semgrep Platform Link,Created At,Last Opened At,Branch,Rule Description
282468999,python.flask.db.generic-sql-flask.generic-sql-flask,Code,Critical,Open,High,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L16,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468999,10/22/2025,10/22/2025,refs/heads/main,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value."
282468998,python.flask.db.generic-sql-flask.generic-sql-flask,Code,Critical,Open,High,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L22,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468998,10/22/2025,10/22/2025,refs/heads/main,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value."
282468997,python.tars.flask.sql.aiosqlite.flask-aiosqlite-sqli.flask-aiosqlite-sqli,Code,Critical,Open,High,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L16,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468997,10/22/2025,10/22/2025,refs/heads/main,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."
282468996,python.tars.flask.sql.aiosqlite.flask-aiosqlite-sqli.flask-aiosqlite-sqli,Code,Critical,Open,High,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L22,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468996,10/22/2025,10/22/2025,refs/heads/main,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."
282468995,python.tars.flask.sql.aiosqlite.flask-without-url-path-aiosqlite-sqli.flask-without-url-path-aiosqlite-sqli,Code,Critical,Open,High,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L16,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468995,10/22/2025,10/22/2025,refs/heads/main,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."
282468994,python.tars.flask.sql.aiosqlite.flask-without-url-path-aiosqlite-sqli.flask-without-url-path-aiosqlite-sqli,Code,Critical,Open,High,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L22,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468994,10/22/2025,10/22/2025,refs/heads/main,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions."
282468993,python.django.security.injection.tainted-sql-string.tainted-sql-string,Code,High,Open,Low,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L16,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468993,10/22/2025,10/22/2025,refs/heads/main,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
282468992,python.django.security.injection.tainted-sql-string.tainted-sql-string,Code,High,Open,Low,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L22,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468992,10/22/2025,10/22/2025,refs/heads/main,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
282468991,python.flask.security.injection.nan-injection.nan-injection,Code,High,Open,Medium,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L12,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468991,10/22/2025,10/22/2025,refs/heads/main,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
282468990,python.flask.security.injection.tainted-sql-string.tainted-sql-string,Code,High,Open,Medium,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L16,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468990,10/22/2025,10/22/2025,refs/heads/main,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
282468989,python.flask.security.injection.tainted-sql-string.tainted-sql-string,Code,High,Open,Medium,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L22,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468989,10/22/2025,10/22/2025,refs/heads/main,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
282468988,python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query,Code,High,Open,Low,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L15,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468988,10/22/2025,10/22/2025,refs/heads/main,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
282468987,python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query,Code,High,Open,Low,security,FALSE,local_scan/demo-python,https://github.com/danardekani/demo-python,https://github.com/danardekani/demo-python/blob/99e8b31393827eb51e2442a5e539d594a1772b4d/server/routes.py#L21,https://semgrep.dev/orgs/ardekanicapital_personal_org/findings/282468987,10/22/2025,10/22/2025,refs/heads/main,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."